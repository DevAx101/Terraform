#!/bin/bash
export org="Job4U"       # Organization Name. Used to tag resources
export tenant="API"      # AWS Account Name or unique ID for Tenant
export environment="Dev" # Environment area eg., preprod or prod
export PROJECT_ID=${org}-${tenant}-${environment}-EKS
export TF_VAR_tags='{Org = "'$org'", Tenant = "'$tenant'", Environment = "'$environment'", ProjectID = "'$PROJECT_ID'" }'

export WORKING_DIR=$PWD

## 1. AWS Profile & Account & Region
# export AWS_PROFILE=default

if [ $(uname -s) == 'Darwin' ] ; then
    export AWS_ACCOUNT=$(aws sts get-caller-identity | jq -r '.Account' | tr -d '\n')
    export AWS_REGION=${AWS_REGION:-"ap-southeast-1"}
else
    export AWS_ACCOUNT=$(aws sts get-caller-identity --output text --query Account)
    # export AWS_REGION=$(curl -s 169.254.169.254/latest/dynamic/instance-identity/document | jq -r '.region')
    export AWS_REGION=${AWS_REGION:-"ap-southeast-1"}
fi
export AWS_REGION=${AWS_REGION:-"ap-southeast-1"}

export TF_STATE_S3_BUCKET=$(echo "${PROJECT_ID}-state-${AWS_ACCOUNT}" | awk '{print tolower($0)}')

## 2. [EKS version](https://docs.aws.amazon.com/eks/latest/userguide/kubernetes-versions.html)
##    [Kubernetes Autoscaler](https://github.com/kubernetes/autoscaler/releases)
export EKS_VERSION=1.20
export CLUSTER_AUTOSCALER_VERSION=1.20.0

## 3. Configuring ECR
export CONTAINER_REGISTRY_URL=${AWS_ACCOUNT}.dkr.ecr.${AWS_REGION}.amazonaws.com
export ECR_REPOSITORY=terraform

## 3. Configuring DockerHub
export DOCKER_REGISTRY_NAMESPACE=nnthanh101
export DOCKER_VERSION=0.15.0
# export HTTPS_GIT_REPO_URL=https://github.com/nnthanh101/terraform.git
# export DOCKER_REGISTRY_USERNAME=nnthanh101
# export DOCKER_REGISTRY_PASSWORD=__MY_PASSWORD__
# export DOCKER_REGISTRY_EMAIL=nnthanh101@gmail.com

## VPC Peering
export TF_VAR_origin_vpc_name="EKS-VPC"
export TF_VAR_destination_vpc_name="CICD-VPC"
export TF_VAR_account_id=${AWS_ACCOUNT}

## 4. AWS VPC
# export TF_VAR_terraform_modules_vpc_version=2.78.0
export TF_VAR_PROJECT_ID=${PROJECT_ID}
export TF_VAR_region=${AWS_REGION}
export TF_VAR_org=${org}
export TF_VAR_tenant=${tenant}
export TF_VAR_environment=${environment}
export TF_VAR_vpc_name=${PROJECT_ID}-${TF_VAR_origin_vpc_name}
export TF_VAR_vpc_cidr="10.0.0.0/18"
export TF_VAR_vpc_public_subnets='["10.0.10.0/24", "10.0.11.0/24"]'
export TF_VAR_vpc_private_subnets='["10.0.1.0/24", "10.0.2.0/24"]'
export TF_VAR_vpc_name_cicd=${PROJECT_ID}-${TF_VAR_destination_vpc_name}
export TF_VAR_vpc_cicd_cidr="172.30.0.0/24"
export TF_VAR_vpc_cicd_public_subnets='["172.30.0.0/27"]'
export TF_VAR_vpc_cicd_private_subnets='["172.30.0.128/27"]'
export TF_VAR_vpc_enable_nat_gateway=true
export TF_VAR_vpc_single_nat_gateway=true
export TF_VAR_vpc_enable_vpn_gateway=true
export TF_VAR_enable_s3_endpoint=true 
## There are 3 VPC-Types: Standard / Private / Advanced
export VPC_TYPE_STANDARD="Standard"
export VPC_TYPE_PRIVATE="Private"
export VPC_TYPE_ADVANCED="Advanced"
export TF_VAR_vpc_type=$VPC_TYPE_STANDARD
# VPC Endpoints for Private Cluster
# https://docs.aws.amazon.com/eks/latest/userguide/private-clusters.html#vpc-endpoints-private-clusters
# export TF_VAR_vpc_endpoint_services_interface='["ec2", "ecr.api", "ecr.dkr", "s3", "logs", "sts", "elasticloadbalancing", "autoscaling", "appmesh-envoy-management", "ssm", "imagebuilder", "ssmmessages", "ec2messages"]'

## EFS

## EC2 Image Builder
export TF_VAR_ec2_image_builder_component_file="component.yml"

## 5. EKS
export TF_VAR_eks_cluster_name=${PROJECT_ID}
export TF_VAR_cluster_version=$EKS_VERSION
export TF_VAR_instance_type_Graviton2="m6g.large"
export TF_VAR_instance_type_AMD="m5a.large"
export TF_VAR_instance_type_Intel="m5.large"
export TF_VAR_instance_type_Spot="t3.medium"
# export TF_VAR_key_pair_public_key=

## 6. NodeSelector 
export NODE_SELECTOR_PRIVATE="PrivateSubnet"
export NODE_SELECTOR_PUBLIC="PublicSubnet"
export NODE_SELECTOR_NORMAL=normal
export NODE_SELECTOR_SPOT=spot
export NODE_SELECTOR_MANAGED_NODE_GROUP="ManagedNodeGroup"
export TF_VAR_NODE_SELECTOR_PRIVATE=$NODE_SELECTOR_PRIVATE
export TF_VAR_NODE_SELECTOR_NORMAL=$NODE_SELECTOR_NORMAL
export TF_VAR_NODE_SELECTOR_PUBLIC=$NODE_SELECTOR_PUBLIC
export TF_VAR_NODE_SELECTOR_SPOT=$NODE_SELECTOR_SPOT
export TF_VAR_NODE_SELECTOR_MANAGED_NODE_GROUP=$NODE_SELECTOR_MANAGED_NODE_GROUP

## 7. App config
export APP_NAMESPACE=api
export APP_REPLICAS=1

## 8. Primary domain
export PRIMARY_DOMAIN=aws.job4u.io

## FIXME
## . Gitlab domain --> gitlab.aws.job4u.io
# export GITLAB_DOMAIN=aws.job4u.io

## . Jenkins
# export JENKINS_DOMAIN=jenkins.aws.job4u.io

## . PodInfo
# export PODINFO_DOMAIN=go

## . DocumentDB
# export DOCDB_MASTER_USER=masteruser
# export DOCDB_MASTER_PASS=randompasswd

# export HELM_DIR=$WORKING_DIR/helm
# export CONFIG_OUTPUT_PATH=$WORKING_DIR/artifacts/
# export KUBECONTEXT=eks_${PROJECT_ID}-cluster
# export KUBECONFIG=${CONFIG_OUTPUT_PATH}/kubeconfig_${PROJECT_ID}-cluster

## Terraform variables
# export TF_VAR_config_output_path=$CONFIG_OUTPUT_PATH
# export TF_VAR_PROJECT_ID=$PROJECT_ID
# export TF_VAR_key_pair_public_key=$ADMIN_PUBLIC_KEY
# echo "TF_VAR_config_output_path"${TF_VAR_config_output_path} + " TF_VAR_PROJECT_ID="${TF_VAR_PROJECT_ID} + " TF_VAR_key_pair_public_key"${TF_VAR_key_pair_public_key}
# export ALB_ROLE_NAME=alb-ingress-controller
